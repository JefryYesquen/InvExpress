

-- ==========================================================
-- TABLAS DE SEGURIDAD Y USUARIOS
-- ==========================================================

CREATE TABLE roles (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) UNIQUE NOT NULL,
    descripcion TEXT
);

CREATE TABLE permisos (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) UNIQUE NOT NULL,
    descripcion TEXT
);

CREATE TABLE usuarios (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(150) NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL,
    password_hash VARCHAR(200) NOT NULL,
    activo BOOLEAN DEFAULT TRUE,
    creado_en TIMESTAMP DEFAULT NOW()
);

CREATE TABLE usuario_rol (
    id SERIAL PRIMARY KEY,
    usuario_id INT REFERENCES usuarios(id) ON DELETE CASCADE,
    rol_id INT REFERENCES roles(id) ON DELETE CASCADE
);

CREATE TABLE rol_permiso (
    id SERIAL PRIMARY KEY,
    rol_id INT REFERENCES roles(id) ON DELETE CASCADE,
    permiso_id INT REFERENCES permisos(id) ON DELETE CASCADE
);

-- ==========================================================
-- TABLAS DE INVENTARIO Y PRODUCTOS
-- ==========================================================

CREATE TABLE categorias (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(150) UNIQUE NOT NULL,
    descripcion TEXT
);

CREATE TABLE unidades_medida (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    abreviatura VARCHAR(10) NOT NULL
);

CREATE TABLE productos (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(200) NOT NULL,
    sku VARCHAR(100) UNIQUE NOT NULL,
    categoria_id INT REFERENCES categorias(id) ON DELETE SET NULL,
    unidad_id INT REFERENCES unidades_medida(id),
    stock_minimo INT DEFAULT 0,
    stock_actual INT DEFAULT 0,
    precio NUMERIC(12,2) DEFAULT 0,
    creado_en TIMESTAMP DEFAULT NOW()
);

-- ==========================================================
-- TABLAS DE MOVIMIENTOS E INVENTARIO
-- ==========================================================

CREATE TABLE inventario (
    id SERIAL PRIMARY KEY,
    producto_id INT REFERENCES productos(id) ON DELETE CASCADE,
    cantidad INT NOT NULL,
    tipo_movimiento VARCHAR(50) NOT NULL CHECK (tipo_movimiento IN ('ENTRADA','SALIDA','AJUSTE')),
    referencia VARCHAR(100),
    fecha TIMESTAMP DEFAULT NOW(),
    usuario_id INT REFERENCES usuarios(id)
);

CREATE TABLE ajustes_inventario (
    id SERIAL PRIMARY KEY,
    producto_id INT REFERENCES productos(id) ON DELETE CASCADE,
    cantidad_ajustada INT NOT NULL,
    motivo TEXT,
    fecha TIMESTAMP DEFAULT NOW(),
    usuario_id INT REFERENCES usuarios(id)
);

-- ==========================================================
-- TABLAS DE VENTAS Y DETALLE DE VENTA
-- ==========================================================

CREATE TABLE ventas (
    id SERIAL PRIMARY KEY,
    codigo VARCHAR(50) UNIQUE NOT NULL,
    fecha TIMESTAMP DEFAULT NOW(),
    cliente_nombre VARCHAR(150),
    total NUMERIC(12,2) DEFAULT 0,
    usuario_id INT REFERENCES usuarios(id)
);

CREATE TABLE detalle_ventas (
    id SERIAL PRIMARY KEY,
    venta_id INT REFERENCES ventas(id) ON DELETE CASCADE,
    producto_id INT REFERENCES productos(id),
    cantidad INT NOT NULL,
    precio_unitario NUMERIC(12,2) NOT NULL,
    subtotal NUMERIC(12,2) GENERATED ALWAYS AS (cantidad * precio_unitario) STORED
);

CREATE TABLE devoluciones (
    id SERIAL PRIMARY KEY,
    venta_id INT REFERENCES ventas(id) ON DELETE CASCADE,
    producto_id INT REFERENCES productos(id),
    cantidad INT NOT NULL,
    motivo TEXT,
    fecha TIMESTAMP DEFAULT NOW(),
    usuario_id INT REFERENCES usuarios(id)
);

-- ==========================================================
-- TABLAS DE REPORTES Y AUDITORÍA
-- ==========================================================

CREATE TABLE reportes (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(150) NOT NULL,
    tipo VARCHAR(50) NOT NULL,
    generado_por INT REFERENCES usuarios(id),
    generado_en TIMESTAMP DEFAULT NOW(),
    ruta_archivo TEXT
);

CREATE TABLE historial_acciones (
    id SERIAL PRIMARY KEY,
    usuario_id INT REFERENCES usuarios(id),
    accion TEXT NOT NULL,
    entidad TEXT,
    fecha TIMESTAMP DEFAULT NOW()
);

-- ==========================================================
-- TRIGGERS PARA CONTROL DE STOCK AUTOMÁTICO
-- ==========================================================

-- Reducción de stock al registrar venta
CREATE OR REPLACE FUNCTION actualizar_stock_venta()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE productos
    SET stock_actual = stock_actual - NEW.cantidad
    WHERE id = NEW.producto_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_actualizar_stock_venta
AFTER INSERT ON detalle_ventas
FOR EACH ROW EXECUTE PROCEDURE actualizar_stock_venta();

-- Aumento de stock al registrar devolución
CREATE OR REPLACE FUNCTION actualizar_stock_devolucion()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE productos
    SET stock_actual = stock_actual + NEW.cantidad
    WHERE id = NEW.producto_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_actualizar_stock_devolucion
AFTER INSERT ON devoluciones
FOR EACH ROW EXECUTE PROCEDURE actualizar_stock_devolucion();

-- ==========================================================
-- DATOS INICIALES
-- ==========================================================

INSERT INTO roles (nombre, descripcion) VALUES
('Administrador', 'Acceso total al sistema'),
('Empleado', 'Gestión básica de inventario y ventas');

INSERT INTO permisos (nombre, descripcion) VALUES
('GESTION_USUARIOS', 'Crear, editar y eliminar usuarios'),
('GESTION_PRODUCTOS', 'Administrar productos y categorías'),
('REGISTRAR_VENTAS', 'Registrar ventas y devoluciones'),
('GENERAR_REPORTES', 'Descargar reportes PDF');

INSERT INTO unidades_medida (nombre, abreviatura) VALUES
('Unidad', 'u'),
('Kilogramo', 'kg'),
('Litro', 'l');

INSERT INTO categorias (nombre, descripcion) VALUES
('Electrónicos', 'Productos de tecnología y dispositivos'),
('Alimentos', 'Productos de consumo alimenticio');

INSERT INTO usuarios (nombre, email, password_hash)
VALUES ('Admin General', 'admin@invexpress.com', 'hash_demo_123');

INSERT INTO usuario_rol (usuario_id, rol_id)
VALUES (1, 1);

